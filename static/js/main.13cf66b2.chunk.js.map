{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","input","target","value","circularPrimes","i","isPrime","isCircular","setState","num","state","number","includes","Math","sqrt","prime","length","toString","lastDigit","firstDigits","floor","pow","react_default","a","createElement","className","href","fa","autofocus","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kMCiHzBC,cA3Gd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAsDPQ,aAAe,SAAAC,GACd,IAAIC,EAAQD,EAAEE,OAAOC,MACjBC,EAAiB,EAGjBH,EAAQ,IACXG,GAAkB,GAInB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOI,GAAK,EAC3Bb,EAAKc,QAAQD,IACZb,EAAKe,WAAWF,KACnBD,GAAkB,GAMrBZ,EAAKgB,SAAS,CACbC,IAAKR,EACLG,eAAgBA,KA1EjBZ,EAAKkB,MAAQ,CACZD,IAAK,KACLL,eAAgB,GAJCZ,uEAOXmB,GAEP,GAAe,IAAXA,EACH,OAAO,EACD,GAAI,CAAC,EAAG,EAAG,EAAG,GAAGC,SAASD,GAChC,OAAO,EAKR,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGC,SAFPD,EAAS,IAGxB,OAAO,EAGR,IAAK,IAAIN,EAAI,EAAGA,GAAKQ,KAAKC,KAAKH,GAASN,IACvC,GAAIM,EAASN,IAAM,EAClB,OAAO,EAGT,OAAO,qCAEGU,GAEV,GAAI,CAAC,EAAG,EAAG,EAAG,GAAGH,SAASG,GACzB,OAAO,EAOR,IAJA,IAAIJ,EAASI,EACTC,EAASL,EAAOM,WAAWD,OAGtBX,EAAI,EAAGA,EAAIW,EAAQX,IAAK,CAChC,IAAIa,EAAYH,EAAQ,GAExB,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGH,SAASM,GAC/B,OAAO,EAGR,IAAIC,EAAcN,KAAKO,MAAML,EAAQ,IAGrC,GAFAJ,EAASO,EAASL,KAAAQ,IAAG,GAAOL,EAAS,GAAKG,GAErCxB,KAAKW,QAAQK,GACjB,OAAO,EAIT,OAAO,mCA2BP,OACCW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,yBACuBH,EAAAC,EAAAC,cAAA,mBAEvBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,2BAECH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOvB,OAAO,IAAIwB,KAAK,uCACnCJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,OAHF,cAOAL,EAAAC,EAAAC,cAAA,SACCC,UAAU,QACVG,UAAU,OACVC,KAAK,SACL1B,MAAOR,KAAKe,MAAMD,IAClBqB,SAAUnC,KAAKI,eAEhBuB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAU9B,KAAKe,MAAMN,yBArGrB2B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13cf66b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { FaInfoCircle } from 'react-icons/fa';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnum: null,\n\t\t\tcircularPrimes: 0,\n\t\t};\n\t}\n\tisPrime(number) {\n\t\t//Special cases & single digits\n\t\tif (number === 1) {\n\t\t\treturn false;\n\t\t} else if ([2, 3, 5, 7].includes(number)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar lastDigit = number % 10;\n\t\t//If last digit is even, 5, or 0, number is not prime, so return false\n\t\tif ([0, 2, 4, 5, 6, 8].includes(lastDigit)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (var i = 2; i <= Math.sqrt(number); i++) {\n\t\t\tif (number % i === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tisCircular(prime) {\n\t\t//Handle single digits\n\t\tif ([2, 3, 5, 7].includes(prime)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar number = prime;\n\t\tvar length = number.toString().length;\n\n\t\t//Rotate the number once for every digit\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tvar lastDigit = prime % 10;\n\t\t\t//If last digit is even, 5, or 0, number is not prime, so return false\n\t\t\tif ([0, 2, 4, 5, 6, 8].includes(lastDigit)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t//Rotate number\n\t\t\tvar firstDigits = Math.floor(prime / 10);\n\t\t\tnumber = lastDigit * 10 ** (length - 1) + firstDigits;\n\t\t\t//If number is not prime, end function\n\t\t\tif (!this.isPrime(number)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\thandleChange = e => {\n\t\tvar input = e.target.value;\n\t\tvar circularPrimes = 0;\n\n\t\t//Handle input of 2\n\t\tif (input > 2) {\n\t\t\tcircularPrimes += 1;\n\t\t}\n\n\t\t//Loop through each odd number below input\n\t\tfor (var i = 3; i < input; i += 2) {\n\t\t\tif (this.isPrime(i)) {\n\t\t\t\tif (this.isCircular(i)) {\n\t\t\t\t\tcircularPrimes += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Update result when finished\n\t\tthis.setState({\n\t\t\tnum: input,\n\t\t\tcircularPrimes: circularPrimes,\n\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"inputWrapper\">\n\t\t\t\t\t<p className=\"header\">\n\t\t\t\t\t\tProject Euler Problem <span>35</span>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className=\"description\">\n\t\t\t\t\t\tHow many circular primes\n\t\t\t\t\t\t<a className=\"info\" target=\" \" href=\"https://projecteuler.net/problem=35\">\n\t\t\t\t\t\t\t<FaInfoCircle />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\tare below:\n\t\t\t\t\t</p>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"input\"\n\t\t\t\t\t\tautofocus=\"true\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tvalue={this.state.num}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<p className=\"result\">{this.state.circularPrimes}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}